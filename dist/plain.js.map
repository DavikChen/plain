{"version":3,"file":"plain.js","sources":["../src/constructors/bmap/index.ts","../src/plain.ts"],"sourcesContent":["import Factory from '../../factory/index'\nimport _Map from '../../factory/map';\nimport _Marker from '../../factory/marker';\nimport _Polyline from '../../factory/polyline';\nimport Layer from '../../factory/layer';\nimport LatLng from '../../factory/latlng';\nimport { mapOption, markerOption, polylineOption } from '../../options/mapOptions';\n\ninterface Original_BMap {\n    Map: {new(): Function};\n    Marker: {new(): Function};\n    Poyline: {new(): Function};\n}\ninterface Original_BMap_Map {\n    addOverlay?(l: object): void;\n}\ninterface Original_BMap_Position {\n    lat: number;\n    lng: number;\n}\ninterface Original_BMap_Polyline {\n    getPath?(): Original_BMap_Position[];\n    setPath?(points: Original_BMap_Position[]): void;\n}\n\nclass Map implements _Map {\n    _original: Original_BMap_Map;\n    _id: string;\n\n    constructor (opt: mapOption) {\n        this._original = new BMap.Map();\n    }\n\n    addLayer (layer: Layer) {\n        let layerOrigin =  layer._original;\n        this._original.addOverlay(layerOrigin);\n    }\n\n    removeLayer () {\n\n    }\n\n    clearLayers () {\n\n    }\n\n    setZoom () {\n\n    }\n\n    getZoom () {\n\n    }\n\n    fitView () {\n\n    }\n\n    setCenter () {\n\n    }\n}\n\nclass Marker implements _Marker {\n    _original: {\n        getPosition?(): Original_BMap_Position;\n        setPosition?(p: Original_BMap_Position): void;\n    };\n\n    constructor (latlng: LatLng, opt?: markerOption) {\n        let options = {\n\n        };\n        this._original = new BMap.Marker();\n    }\n\n    setLatLng (latlng: LatLng) {\n        let p = {\n            lat: latlng[0],\n            lng: latlng[1]\n        };\n        this._original.setPosition(p);\n        return this;\n    }\n\n    getLatLng (): LatLng {\n        let p =  this._original.getPosition();\n        return [p.lat, p.lng];\n    }\n}\n\nclass Polyline implements _Polyline {\n    _original: Original_BMap_Polyline;\n \n    constructor (latlngs: LatLng[], opt?: polylineOption) {\n        this._original = new BMap.Poyline();\n    }\n\n    setPath (latlngs: LatLng[]) {\n        let points = latlngs.map(item => {\n            return {\n                lat: item[0],\n                lng: item[1]\n            }\n        });\n        this._original.setPath(points);\n    }\n\n    getPath (): LatLng[] {\n        let points = this._original.getPath() || [];\n        return points.map(item => {\n            return [item.lat, item.lng]\n        });\n    }\n}\n\nexport default class B_Map implements Factory {\n    Map (opt: mapOption): Map {\n        return new Map(opt);\n    }\n\n    Marker (latlng: LatLng, opt?: markerOption): Marker {\n        return new Marker(latlng, opt);\n    }\n\n    Polyline (latlngs: LatLng[], opt: polylineOption): Polyline {\n        return new Polyline(latlngs, opt);\n    }\n};","import { Layers } from './type/type';\nimport Factory from './factory/index';\nimport LatLng from './factory/latlng';\nimport { mapOption, markerOption, polylineOption } from './options/mapOptions';\nimport B_Map from './constructors/bmap/index';\n\ndeclare global {\n    interface Window {\n    }\n}\n\nexport default class Plain {\n    FACTORYS: {[key: string]: Factory};\n    map: object;\n    factory: Factory;          \n    \n    constructor (factory?: Factory | string) {\n        this.FACTORYS = {\n            'BMAP': new B_Map(),\n        };\n        factory && this.use(factory);      \n    }\n\n    // load the map factory plugin\n    use (factory: Factory | string): Plain {\n        let f;\n        if (typeof factory === 'string') {\n            f = this.FACTORYS[factory];\n        } else {\n            f = factory;\n        }\n        this.factory = f;\n        return this;\n    }\n\n    // create Map\n    @tagging()\n    Map (opt: mapOption) {\n        return this.factory.Map(opt);\n    }\n\n    // create Marker\n    @tagging()\n    Marker (latlng: LatLng, opt?: markerOption) {\n        return this.factory.Marker(latlng, opt);\n    }\n\n    // create Polyline\n    @tagging()\n    Polyline (latlngs: LatLng[], opt?: polylineOption) {\n        return this.factory.Polyline(latlngs, opt);\n    }\n}\n\n/**\n * PropertyDescriptor\n */\nfunction tagging (): Function {\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n        let oldFn = descriptor.value;\n        descriptor.value= function (arg: any) {\n            let value = oldFn.call(this, arg);\n            value._id = Math.random().toString(16).substr(2);\n            return value;  \n        };\n    }\n}\n\n"],"names":[],"mappings":"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"}